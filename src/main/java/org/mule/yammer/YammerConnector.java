/**
 * Mule Yammer Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.yammer;

import java.util.Collections;
import java.util.List;

import javax.annotation.PostConstruct;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.codehaus.jackson.jaxrs.Annotations;
import org.codehaus.jackson.jaxrs.JacksonJsonProvider;
import org.codehaus.jackson.map.DeserializationConfig;
import org.codehaus.jackson.map.ObjectMapper;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.oauth.OAuth2;
import org.mule.api.annotations.oauth.OAuthAccessToken;
import org.mule.api.annotations.oauth.OAuthConsumerKey;
import org.mule.api.annotations.oauth.OAuthConsumerSecret;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.springframework.http.HttpStatus;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.client.filter.LoggingFilter;
import com.sun.jersey.oauth.client.OAuthClientFilter;
import com.sun.jersey.oauth.signature.HMAC_SHA1;
import com.sun.jersey.oauth.signature.OAuthParameters;
import com.sun.jersey.oauth.signature.OAuthSecrets;

/**
 * Connector for Yammer related functions.
 * 
 * <a href="https://www.yammer.com">Yammer</a> is a social-network-like internal corporate communications system,
 * where users are able to post messages, follow users, 
 * images and so on in a manner like Facebook or Twitter.
 * 
 * This connector allows to:
 * <ul>
 *  <li>Retrieve messages</li>
 *  <li>Retrieve received messages</li>
 *  <li>Retrieve private messages</li>
 *  <li>Retrieve sent messages</li>   
 * </ul>
 * 
 * @author MuleSoft, Inc. 
 */
@Module(name = "yammer", schemaVersion="2.0")
@OAuth2(authorizationUrl = "https://www.yammer.com/dialog/oauth", 
       accessTokenUrl = "https://www.yammer.com/oauth2/access_token.json",
       callbackPath = "yammerCodeRetrievingPath",
       accessTokenRegex = "\"token\":\"([^&]+?)\"" )
public class YammerConnector
{
    protected transient Log logger = LogFactory.getLog(getClass());

    /**
     * The OAuth consumer key 
     */
    @Configurable
    @OAuthConsumerKey
    private String consumerKey;

    /**
     * The OAuth consumer secret 
     */
    @Configurable
    @OAuthConsumerSecret
    private String consumerSecret;

    /**
     * If connector should be run in debug mode.
     * This enables logging of HTTP activity 
     * against Yammer 
     */
    @Configurable
    @Optional
    @Default("false")
    private boolean debug;

    // @Configurable - will reenable when CC supports this.
    private Client client;


    
    @PostConstruct
    public void initialise() 
    {
        if (client == null)
        {
            DefaultClientConfig config = new DefaultClientConfig();
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            JacksonJsonProvider provider = new JacksonJsonProvider(Annotations.JACKSON);
            provider.setMapper(mapper);
            config.getSingletons().add(provider);
            client = Client.create(config);
        }

        if (debug)
        {
            client.addFilter(new LoggingFilter());
        }
    }

    /**
     * Answers all messages in this network. Corresponds to the "Company Feed" tab on the website.
     * 
     * {@sample.xml ../../../doc/mule-module-yammer.xml.sample yammer:request-authorization}
     * 
     * @param accessToken OAuth access token
     * @param accessTokenSecret OAuth access token secret
     * @return the list of {@link Message}s
     */
    @Processor
    public List<Message> getMessages(@OAuthAccessToken String accessToken)
    {
        return getMessages("https://www.yammer.com/api/v1/messages.json", accessToken);
    }

    /**
     * Answers the whole list of messages sent by the current user. 
     * Corresponds to the "Sent" tab on the website.
     * 
     * {@sample.xml ../../../doc/mule-module-yammer.xml.sample yammer:get-sent-messages}
     * 
     * @param accessToken OAuth access token
     * @param accessTokenSecret OAuth access token secret
     * @return the list of {@link Message}s
     */
    @Processor
    public List<Message> getSentMessages(@OAuthAccessToken String accessToken)
    {
        return getMessages("https://www.yammer.com/api/v1/messages/sent.json", accessToken);
    }

    /**
     * Answers the list of messages received by the logged-in user. 
     * Corresponds to the "Received" tab on the website.
     * 
     * {@sample.xml ../../../doc/mule-module-yammer.xml.sample yammer:get-received-messages}
     * 
     * @param accessToken OAuth access token
     * @param accessTokenSecret OAuth access token secret
     * @return the list of {@link Message}s
     */
    @Processor
    public List<Message> getReceivedMessages(@OAuthAccessToken String accessToken)
    {
        return getMessages("https://www.yammer.com/api/v1/messages/received.json", accessToken);
    }

    /**
     * Answers the whole list of private Messages (aka Direct Messages) for the logged-in user. 
     * Corresponds to the "Direct Messages" section on the website.
     * 
     * {@sample.xml ../../../doc/mule-module-yammer.xml.sample yammer:get-private-messages}
     * 
     * @param accessToken OAuth access token
     * @param accessTokenSecret OAuth access token secret
     * @return the list of {@link Message}s
     */
    @Processor
    public List<Message> getPrivateMessages(@OAuthAccessToken String accessToken)
    {
        return getMessages("https://www.yammer.com/api/v1/messages/private.json", accessToken);
    }

    /**
     * Answers the list of messages followed by the logged-in user. 
     * Corresponds to the "My Feed" tab on the website.
     * {@sample.xml ../../../doc/mule-module-yammer.xml.sample yammer:get-following-messages}
     * 
     * @param accessToken OAuth access token
     * @param accessTokenSecret OAuth access token secret
     * @return the list of {@link Message}s
     */
    @Processor
    public List<Message> getFollowingMessages(@OAuthAccessToken String accessToken)
    {
        return getMessages("https://www.yammer.com/api/v1/messages/following.json", accessToken);
    }

    private List<Message> getMessages(String url, String accessToken)
    {
        ClientResponse response = oauthResource(url, accessToken).get(ClientResponse.class);
        if (response.getStatus() != HttpStatus.OK.value())
        {
            throw new RuntimeException(response.getEntity(String.class));
        }
        
        List<Message> messages = response.getEntity(Messages.class).getMessages();
        
        if (messages == null)
        {
            return Collections.emptyList();
        }
        return messages;
    }

    /**
     * Creates a WebResource with the proper oauth authentication information.
     * 
     * @param accessToken OAuth access token
     * @param url the url of the resource
     * @return the authenticated {@link WebResource} 
     */
    protected WebResource oauthResource(String url, String accessToken)
    {
        WebResource resource = client.resource(url+"?access_token="+accessToken);
        OAuthParameters params = new OAuthParameters().signatureMethod(HMAC_SHA1.NAME).consumerKey(
            consumerKey).token(accessToken).version("1.0");

        OAuthSecrets secrets = new OAuthSecrets().consumerSecret(consumerSecret);

        resource.addFilter(new OAuthClientFilter(client.getProviders(), params, secrets));
        return resource;
    }


    public Client getClient()
    {
        return client;
    }

    public void setClient(Client client)
    {
        this.client = client;
    }

    public String getConsumerKey()
    {
        return consumerKey;
    }

    public void setConsumerKey(String applicationKey)
    {
        this.consumerKey = applicationKey;
    }

    public String getConsumerSecret()
    {
        return consumerSecret;
    }

    public void setConsumerSecret(String applicationSecret)
    {
        this.consumerSecret = applicationSecret;
    }

    public boolean isDebug()
    {
        return debug;
    }

    public void setDebug(boolean debug)
    {
        this.debug = debug;
    }

}
